{"title":"Dynamics Marketing: Call a Plugin When a Trigger is Fired","date":"2022-12-16T00:00:00.000Z","date_formatted":{"ll":"Dec 16, 2022","L":"12/16/2022","MM-DD":"12-16"},"thumbnail":"https://ichrisj.gitee.io/reslib/images/call-plugins-when-a-trigger-is-fired/thumbnail.jpg","link":"2022/12/16/call-plugins-when-a-trigger-is-fired","comments":true,"tags":["Custom API","Dynamics Marketing","Trigger"],"updated":"2022-12-16T15:42:52.820Z","content":"<p>In Real-time Marketing, when we create a trigger, there will be a Custom API with same name automatically generated. The Custom API has the same name as the trigger. Custom APIs extends the concept of custom actions to provide developers with capabilities not limited by the workflow designer. With Custom API, we are able to trigger some business logics via Power Automates, plugins,etc when the message is called. In that case, we can also trigger some business logics when a custom trigger is fired.</p>\n<p>In this blog, I am going to call a plugin when a custom trigger is fired. Actually, we can call a Power Automate with the same way.</p>\n<h1 id=\"1.-create-a-custom-trigger.\">1. Create a custom trigger.<a title=\"#1.-create-a-custom-trigger.\" href=\"#1.-create-a-custom-trigger.\"></a></h1>\n<p>First, let’s create a custom trigger named “custom trigger demo”, set “Custom Data” to “Contact” entity, add one attribute “name” in this demo. Then click Next to the end and publish.</p>\n<p><img src=\"https://ichrisj.gitee.io/reslib/images/call-plugins-when-a-trigger-is-fired/custom%20trigger%20demo.png\" alt=\"custom trigger demo\" loading=\"lazy\" class=\"φbp\"></p>\n<p>Now, let’s check Custom APIs in Default Solution via <a href=\"https://make.powerapps.com\" target=\"_blank\">Maker Portal</a>, we can see there is a new Custom API record generated.</p>\n<p><img src=\"https://ichrisj.gitee.io/reslib/images/call-plugins-when-a-trigger-is-fired/customapi1.png\" alt=\"Custom API\" loading=\"lazy\" class=\"φbp\"></p>\n<p>Open the record and copy the <em>Unique Name</em>, we will use it later.</p>\n<p><img src=\"https://ichrisj.gitee.io/reslib/images/call-plugins-when-a-trigger-is-fired/customapi2.png\" alt=\"Custom API\" loading=\"lazy\" class=\"φbp\"></p>\n<h1 id=\"2.-create-a-journey.\">2. Create a journey.<a title=\"#2.-create-a-journey.\" href=\"#2.-create-a-journey.\"></a></h1>\n<p>Here we can use the trigger to create a trigger-based journey. When the trigger is fired, we will see the journey to be executed. Make the journey simple, we just want to verify the trigger is fired.</p>\n<p><img src=\"https://ichrisj.gitee.io/reslib/images/call-plugins-when-a-trigger-is-fired/journey.png\" alt=\"journey\" loading=\"lazy\" class=\"φbp\"></p>\n<h1 id=\"3.-create-and-register-a-plugin\">3. Create and register a plugin<a title=\"#3.-create-and-register-a-plugin\" href=\"#3.-create-and-register-a-plugin\"></a></h1>\n<p>To verify whether a plugin can be triggered when a trigger is fired, we need to create a plugin first.</p>\n<p>Use Visual Studio and follow the sample code below to create a plugin, then build an assembly.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.Xrm.Sdk;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Newtonsoft.Json;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">TriggerPlugin</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">CustomAPIPlugin</span> : <span class=\"title\">IPlugin</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Execute</span>(<span class=\"params\">IServiceProvider serviceProvider</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ITracingService tracingSvc = (ITracingService)serviceProvider.GetService(<span class=\"keyword\">typeof</span>(ITracingService));</span><br><span class=\"line\"></span><br><span class=\"line\">            tracingSvc.Trace(<span class=\"string\">&quot;Custom API plugin is called.&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (context.MessageName.Equals(<span class=\"string\">&quot;msdynmkt_customtriggerdemo&quot;</span>) &amp;&amp; context.Stage.Equals(<span class=\"number\">40</span>))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                tracingSvc.Trace(<span class=\"string\">$&quot;Parameter passed: <span class=\"subst\">&#123;(<span class=\"built_in\">string</span>)context.InputParameters[<span class=\"string\">&quot;msdynmkt_name&quot;</span>]&#125;</span>&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">var</span> data = JsonConvert.SerializeObject(context.InputParameters);</span><br><span class=\"line\">            tracingSvc.Trace(<span class=\"string\">$&quot;Input Parameters: <span class=\"subst\">&#123;data&#125;</span>&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Afterwards, register the assembly with <a href=\"https://learn.microsoft.com/en-us/power-apps/developer/data-platform/register-plug-in#plug-in-registration-tool-prt\" target=\"_blank\">Plugin Registration Tool</a>. Then register a step on message <em><strong>msdynmkt_customtriggerdemo</strong></em>. (the unique name of the custom api, copied previously)</p>\n<p><img src=\"https://ichrisj.gitee.io/reslib/images/call-plugins-when-a-trigger-is-fired/registerstep.png\" alt=\"register the step\" loading=\"lazy\" class=\"φbp\"></p>\n<h1 id=\"4.-fire-the-trigger\">4. Fire the trigger<a title=\"#4.-fire-the-trigger\" href=\"#4.-fire-the-trigger\"></a></h1>\n<p>In order to make the trigger get fired, we can use another journey to call the trigger in some steps. Actually, the Custom API is an unbound action in Dataverse, so we can use Power Automate to fire the <em><strong>msdynmkt_customtriggerdemo</strong></em> action.</p>\n<p>Here，let’s try to create an instant flow to fire the unbound action.</p>\n<p><img src=\"https://ichrisj.gitee.io/reslib/images/call-plugins-when-a-trigger-is-fired/flow.png\" alt=\"instant flow\" loading=\"lazy\" class=\"φbp\"></p>\n<blockquote>\n<p>[!NOTE]<br>\nThe scheme name of the <em>name</em> attribute in the trigger is <strong>msdynmkt_name</strong>. Knowing this, it will help you to retrieve attributes in plugin code which are added in the trigger</p>\n</blockquote>\n<h1 id=\"5.-enable-plugin-trace\">5. Enable plugin trace<a title=\"#5.-enable-plugin-trace\" href=\"#5.-enable-plugin-trace\"></a></h1>\n<p>In the above source code, I have added several plugin logs. In order to see the data in the runtime, let’s <a href=\"https://learn.microsoft.com/en-us/power-apps/developer/data-platform/logging-tracing#enable-trace-logging\" target=\"_blank\">enable the plugin trace</a> in Dataverse, so when the plugin is triggered, we will see the data in the plugin logs.</p>\n<h1 id=\"6.-fire\">6. Fire<a title=\"#6.-fire\" href=\"#6.-fire\"></a></h1>\n<p>Run the instant flow with “Hello World!” for the name_input parameter. Once it is executed successfully, we will see the log in the plugin trace and the journey is executed as well.</p>\n<p><img src=\"https://ichrisj.gitee.io/reslib/images/call-plugins-when-a-trigger-is-fired/plugintrace.png\" alt=\"plugin trace\" loading=\"lazy\" class=\"φbp\"></p>\n<p><strong>Thank you!</strong></p>\n","prev":{"title":"Power Pages与Azure Application Insights的集成","link":"2024/01/09/integrate-application-insights-with-power-pages"},"next":{"title":"数据结构之的位图","link":"2022/12/05/bitmap"},"plink":"https://blog.citysouth.cc/2022/12/16/call-plugins-when-a-trigger-is-fired/","toc":[{"id":"1.-create-a-custom-trigger.","title":"1. Create a custom trigger.","index":"1"},{"id":"2.-create-a-journey.","title":"2. Create a journey.","index":"2"},{"id":"3.-create-and-register-a-plugin","title":"3. Create and register a plugin","index":"3"},{"id":"4.-fire-the-trigger","title":"4. Fire the trigger","index":"4"},{"id":"5.-enable-plugin-trace","title":"5. Enable plugin trace","index":"5"},{"id":"6.-fire","title":"6. Fire","index":"6"}],"copyright":{"link":"<a href=\"https://blog.citysouth.cc/2022/12/16/call-plugins-when-a-trigger-is-fired/\" title=\"Dynamics Marketing: Call a Plugin When a Trigger is Fired\">https://blog.citysouth.cc/2022/12/16/call-plugins-when-a-trigger-is-fired/</a>","license":"自由转载-非商用-禁止演绎-保持署名 Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-nd/4.0/\" target=\"_blank\">CC BY-NC-ND 4.0</a>)","published":"December 16, 2022"},"reading_time":"676 words in 6 min"}