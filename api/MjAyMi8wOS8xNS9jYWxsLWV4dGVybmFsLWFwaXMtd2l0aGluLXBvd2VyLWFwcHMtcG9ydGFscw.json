{"title":"Call External APIs within Power Apps Portal","date":"2022-09-15T12:52:56.371Z","date_formatted":{"ll":"Sep 15, 2022","L":"09/15/2022","MM-DD":"09-15"},"thumbnail":"https://ichrisj.gitee.io/reslib/images/thumbnails/photo-1578503995198-743266f741c5.jpg","link":"2022/09/15/call-external-apis-within-power-apps-portals","comments":true,"tags":["Power Apps Portal"],"updated":"2022-09-15T06:41:31.748Z","content":"<p>Think about this common scenario: You have a Power Apps Portal and want authenticated portal users to call some external APIs to retrieve/update data from outside instead of from the binding Dataverse instance. Previously, I would say there were lots of problems: how to make sure the APIs could be only called by authenticated users? How to secure the requests? How to fix CORS (Cross Origin Resource Sharing) issues? Now, it becomes easier, because Portal has <a href=\"https://docs.microsoft.com/en-us/powerapps/maker/portals/oauth-implicit-grant-flow\" target=\"_blank\">OAuth 2.0 implicit grant flow</a> feature and easily to integrate with <a href=\"https://azure.microsoft.com/en-us/services/api-management/\" target=\"_blank\">Azure API Management</a> service. Here I will do it step by step.</p>\n<h3 id=\"1.-register-an-app-on-azure\">1. Register an App on Azure<a title=\"#1.-register-an-app-on-azure\" href=\"#1.-register-an-app-on-azure\"></a></h3>\n<p>Create a App Registration on the Azure AD which under the same tenant where the Portal is hosted, then copy the Application ID.</p>\n<blockquote>\n<p>When a Power Apps Portal provisioned, there will be App Registration created. It’s OK to use this one if you don’t want to create new one.</p>\n</blockquote>\n<p><img src=\"https://ichrisj.gitee.io/reslib/images/call-external-apis-within-power-apps-portals/appliction_id.png\" alt=\"application id\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"2.-create-site-settings\">2. Create Site Settings<a title=\"#2.-create-site-settings\" href=\"#2.-create-site-settings\"></a></h3>\n<p>Now we need to register client id with the portal for which the implicit grant flow is allowed. Go to the binding Dataverse environment, open the Portal Management app and create two Site Settings.</p>\n<ul>\n<li>a. ImplicitGrantFlow/RegisteredClientId – The value is the copied Application ID.</li>\n<li>b. ImplicitGrantFlow/{ClientId}/RedirectUri – The {ClientId} is the copied Application ID. The value is the valid redirect URIs that are allowed for a specific client ID.<br>\n<em>ref: <a href=\"https://docs.microsoft.com/en-us/powerapps/maker/portals/oauth-implicit-grant-flow#register-client-id-for-implicit-grant-flow\" target=\"_blank\">https://docs.microsoft.com/en-us/powerapps/maker/portals/oauth-implicit-grant-flow#register-client-id-for-implicit-grant-flow</a></em></li>\n</ul>\n<h3 id=\"3.-get-authentication-token\">3. Get Authentication Token<a title=\"#3.-get-authentication-token\" href=\"#3.-get-authentication-token\"></a></h3>\n<p>Now if you sign in the Portal and access URL <code>PortalURL/_services/auth/token?client_id=&#123;clientid&#125;</code>, you will get a JWT (JSON Web Token).</p>\n<p>Go to <a href=\"https://jwt.io\" target=\"_blank\">jwt.io</a> to decode the token, you can see the details the token carried. Please copy values of attributes <strong>aud</strong> (audience) and <strong>iss</strong> (issuer), we will use it later. Actually, the aud is application id and the iss is the portal url.</p>\n<h3 id=\"4.-create-an-api-on-apim\">4. Create an API on APIM<a title=\"#4.-create-an-api-on-apim\" href=\"#4.-create-an-api-on-apim\"></a></h3>\n<blockquote>\n<p>(skip if you already have one)</p>\n</blockquote>\n<p>Please follow this <a href=\"https://docs.microsoft.com/en-us/azure/api-management/import-and-publish\" target=\"_blank\">tutorial</a> to create an API on APIM. It doesn’t require that APIM service should be in the same tenant as the portal.</p>\n<h3 id=\"5.-validate-jwt-token-config\">5. Validate JWT token config<a title=\"#5.-validate-jwt-token-config\" href=\"#5.-validate-jwt-token-config\"></a></h3>\n<p>In order to make sure the API can be called with the token from Portal, APIM provides you with <code>&lt;validate-jwt&gt;</code> policy that takes off majority of the effort related to JWT token validation.</p>\n<p>Go to the APIM and open the ‘Police code editor’ for the ‘Inbound processing’ of the API, and add the policy under <code>&lt;inbound&gt;</code> tag.</p>\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">validate-jwt</span> <span class=\"attr\">header-name</span>=<span class=\"string\">&quot;Authorization&quot;</span> <span class=\"attr\">failed-validation-httpcode</span>=<span class=\"string\">&quot;401&quot;</span> <span class=\"attr\">failed-validation-error-message</span>=<span class=\"string\">&quot;Unauthorized&quot;</span> <span class=\"attr\">require-scheme</span>=<span class=\"string\">&quot;Bearer&quot;</span> <span class=\"attr\">output-token-variable-name</span>=<span class=\"string\">&quot;securityToken&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">issuer-signing-keys</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">key</span> <span class=\"attr\">n</span>=<span class=\"string\">&quot;&#123;modulus goes here&#125;&quot;</span> <span class=\"attr\">e</span>=<span class=\"string\">&quot;&#123;exponent goes here&#125;&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">issuer-signing-keys</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">audiences</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">audience</span>&gt;</span>&#123;Application(Client) ID&#125;<span class=\"tag\">&lt;/<span class=\"name\">audience</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">audiences</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">issuers</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">issuer</span>&gt;</span>&#123;Portal URL, eg: xxx.powerappsportal.com&#125;<span class=\"tag\">&lt;/<span class=\"name\">issuer</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">issuers</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">validate-jwt</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Now we have a problem how to set the key. To get the key, please open <code>PortalURL/_services/auth/publickey</code>, copy the whole text and paste it to the <code>key_encoded</code>, then run the python code to get <code>Modulus</code> and <code>Exponent</code> and set them to the key’s attributes.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Ensure the libraries below</span></span><br><span class=\"line\"><span class=\"comment\"># pip install cryptography</span></span><br><span class=\"line\"><span class=\"comment\"># pip install pycryptodome</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.PublicKey <span class=\"keyword\">import</span> RSA</span><br><span class=\"line\"><span class=\"keyword\">import</span> base64</span><br><span class=\"line\"><span class=\"keyword\">from</span> binascii <span class=\"keyword\">import</span> unhexlify</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">long_to_bytes</span> (<span class=\"params\">val</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    Use :ref:`string formatting` and :func:`~binascii.unhexlify` to</span></span><br><span class=\"line\"><span class=\"string\">    convert ``val``, a :func:`long`, to a byte :func:`str`.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    :param long val: The value to pack</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    Using :ref:`string formatting` lets us use Python&#x27;s C innards.</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># one (1) hex digit per four (4) bits</span></span><br><span class=\"line\">    width = val.bit_length()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># unhexlify wants an even multiple of eight (8) bits, but we don&#x27;t</span></span><br><span class=\"line\">    <span class=\"comment\"># want more digits than we need (hence the ternary-ish &#x27;or&#x27;)</span></span><br><span class=\"line\">    width += <span class=\"number\">8</span> - ((width % <span class=\"number\">8</span>) <span class=\"keyword\">or</span> <span class=\"number\">8</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># format width specifier: four (4) bits per hex digit</span></span><br><span class=\"line\">    fmt = <span class=\"string\">&#x27;%%0%dx&#x27;</span> % (width // <span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># prepend zero (0) to the width, to zero-pad the output</span></span><br><span class=\"line\">    s = unhexlify(fmt % val)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> s</span><br><span class=\"line\"></span><br><span class=\"line\">key_encoded = <span class=\"string\">&quot;&quot;&quot;-----BEGIN PUBLIC KEY-----</span></span><br><span class=\"line\"><span class=\"string\">MI*************************************************************G</span></span><br><span class=\"line\"><span class=\"string\">jn*************************************************************4</span></span><br><span class=\"line\"><span class=\"string\">hY*************************************************************2</span></span><br><span class=\"line\"><span class=\"string\">PG*************************************************************+</span></span><br><span class=\"line\"><span class=\"string\">tj*************************************************************K</span></span><br><span class=\"line\"><span class=\"string\">uG*************************************************************t</span></span><br><span class=\"line\"><span class=\"string\">qw*****B</span></span><br><span class=\"line\"><span class=\"string\">-----END PUBLIC KEY-----&quot;&quot;&quot;</span></span><br><span class=\"line\">pubkey = RSA.importKey(key_encoded)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Modulus:&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(base64.b64encode(long_to_bytes(pubkey.n)).decode() + <span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Exponent:&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(base64.b64encode(long_to_bytes(pubkey.e)).decode())</span><br></pre></td></tr></table></figure>\n<p><em>ref: <a href=\"https://psempruch.medium.com/authorizing-powerapps-portal-calls-with-azure-api-management-8880c0bbd64d\" target=\"_blank\">https://psempruch.medium.com/authorizing-powerapps-portal-calls-with-azure-api-management-8880c0bbd64d</a></em></p>\n<h3 id=\"6.-fix-cors.\">6. Fix CORS.<a title=\"#6.-fix-cors.\" href=\"#6.-fix-cors.\"></a></h3>\n<p>As the API is in a different domain, so if we try to call it from Portal website with JavaScript code, it will encounter the CORS issue. To fix it, please add a CORS policy to the API’s inbound policy. You can specify which origins, methods, etc are allowed to call the APIs. Here, I will set them to * to allow all.</p>\n<blockquote>\n<p><strong>Make sure the <code>&lt;base /&gt;</code> is moved to the bottom of the Inbound.</strong></p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">inbound</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">validate-jwt</span> &gt;</span></span><br><span class=\"line\">    …</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">validate-jwt</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">cors</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">allowed-origins</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">origin</span>&gt;</span>*<span class=\"tag\">&lt;/<span class=\"name\">origin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">allowed-origins</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">allowed-methods</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">method</span>&gt;</span>*<span class=\"tag\">&lt;/<span class=\"name\">method</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">allowed-methods</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">allowed-headers</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span>*<span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">allowed-headers</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">expose-headers</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span>*<span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">expose-headers</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">cors</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">base</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">inbound</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"7.-remove-subscription-requirement\">7. Remove Subscription requirement<a title=\"#7.-remove-subscription-requirement\" href=\"#7.-remove-subscription-requirement\"></a></h3>\n<p>If you don’t want each API call needs to carry a subscript id in the header, please turn off the Subscription required.<br>\n<img src=\"https://ichrisj.gitee.io/reslib/images/call-external-apis-within-power-apps-portals/subscription_required.png\" alt=\"subscription required\" loading=\"lazy\"></p>\n<h3 id=\"8.-test.\">8. Test.<a title=\"#8.-test.\" href=\"#8.-test.\"></a></h3>\n<p>Now everything is settle down, we are able to try to call the API in Portal with JavaScript code.</p>\n<ul>\n<li>a. Create a Web Template and add JavaScript code to get token, then all the API. In order to make it simple, let’s use the <a href=\"https://github.com/microsoft/PowerApps-Samples/blob/master/portals/TokenEndpoint.js\" target=\"_blank\">sample code</a> with little updates in the template source.<br>\n<em>ref: <a href=\"https://docs.microsoft.com/en-us/powerapps/maker/portals/oauth-implicit-grant-flow#token-endpoint-sample\" target=\"_blank\">https://docs.microsoft.com/en-us/powerapps/maker/portals/oauth-implicit-grant-flow#token-endpoint-sample</a></em></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&#x27;response&#x27;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">/*</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">    Portals - Implicit Grant Sample</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">   </span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">    Token Endpoint</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">    Description:</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">        * getAuthenticationToken function is used to fetch an ID token using the Token endpoint in Portals.</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">        * getAuthenticationToken is added to window.auth using an IIFE.</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">        * After the IIFE gets executed, the token can be fetched anytime using window.auth.getAuthenticationToken(callback);</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">        * getAuthenticationToken accepts a callback function to handle the token returned from Portals.</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">        * Token is returned only for authenticated users.</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">        * ImplicitGrantForceLogin cookie key is used to decide whether or not to redirect user to login page based on the Token endpoint&#x27;s response.</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">*/</span></span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">// Part 1: Add getAuthenticationToken to window.auth</span></span></span><br><span class=\"line\"><span class=\"javascript\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">auth, $</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"meta\">    &quot;use strict&quot;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> callback = <span class=\"literal\">null</span></span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//Force Login for Anonymous users. Below line can be commented if force login is not needed.</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//$.cookie(&quot;ImplicitGrantForceLogin&quot;, 1);  </span></span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> clientId = <span class=\"string\">&quot;xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&quot;</span>; <span class=\"comment\">//Add the Client ID registered on CRM.</span></span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">    auth.getAuthenticationToken = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">callbackFn</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        callback = callbackFn;</span></span><br><span class=\"line\"><span class=\"javascript\">       </span></span><br><span class=\"line\"><span class=\"javascript\">        $.ajax(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"attr\">type</span>: <span class=\"string\">&#x27;GET&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"attr\">url</span>: <span class=\"string\">`/_services/auth/token?client_id=<span class=\"subst\">$&#123;clientId&#125;</span>`</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"attr\">cache</span>: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"attr\">success</span>: handleGetAuthenticationTokenSuccess,</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"attr\">error</span>: <span class=\"function\"><span class=\"params\">jqXHR</span> =&gt;</span> callback(<span class=\"literal\">null</span>, jqXHR)</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleGetAuthenticationTokenSuccess</span>(<span class=\"params\">data, status, jqXHR</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> jsonResult = <span class=\"built_in\">JSON</span>.parse(jqXHR.getResponseHeader(<span class=\"string\">&#x27;X-Responded-JSON&#x27;</span>));</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">if</span> (jsonResult &amp;&amp; jsonResult.status == <span class=\"number\">401</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">var</span> forceLogin = <span class=\"built_in\">Number</span>($.cookie(<span class=\"string\">&quot;ImplicitGrantForceLogin&quot;</span>)) === <span class=\"number\">1</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">if</span> (forceLogin) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"comment\">// If the user is not logged in, redirect to login page</span></span></span><br><span class=\"line\"><span class=\"javascript\">                redirectToLogin();</span></span><br><span class=\"line\"><span class=\"javascript\">            &#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                callback(<span class=\"literal\">null</span>,jsonResult); <span class=\"comment\">//Run callback method with error message</span></span></span><br><span class=\"line\"><span class=\"javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">// Pass the token to the callback function</span></span></span><br><span class=\"line\"><span class=\"javascript\">            callback(data);</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">redirectToLogin</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> redirectUrl = <span class=\"built_in\">window</span>.location;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> loginUrl = <span class=\"built_in\">window</span>.location.origin + <span class=\"string\">&#x27;/SignIn?returnUrl=&#x27;</span> + <span class=\"built_in\">encodeURIComponent</span>(redirectUrl);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">window</span>.location = loginUrl;</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">&#125;(<span class=\"built_in\">window</span>.auth || (<span class=\"built_in\">window</span>.auth = &#123;&#125;), <span class=\"built_in\">window</span>.jQuery));</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">// Part 2: Define Callback function and call window.auth.getAuthenticationToken to fetch the token.</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> callbackFn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data, err</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">if</span>(data) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        $.ajax(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"attr\">url</span>: <span class=\"string\">&#x27;https://xxxx.azure-api.net/sessions&#x27;</span>, <span class=\"comment\">// The API hosted on APIM</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"attr\">type</span>: <span class=\"string\">&#x27;GET&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"attr\">headers</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"string\">&#x27;Authorization&#x27;</span>: <span class=\"string\">`Bearer <span class=\"subst\">$&#123;data&#125;</span>`</span> <span class=\"comment\">// The token from /_services/auth/token?client_id=$&#123;clientId&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"attr\">success</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">               $(<span class=\"string\">&quot;#response&quot;</span>).text(<span class=\"built_in\">JSON</span>.stringify(result)); <span class=\"comment\">// The returned data.</span></span></span><br><span class=\"line\"><span class=\"javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"attr\">error</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                $(<span class=\"string\">&quot;#response&quot;</span>).text(error.statusText);</span></span><br><span class=\"line\"><span class=\"javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;Error&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">if</span>(err)&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">// 401 is returned for anonymous users.</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">if</span>(err.status == <span class=\"number\">401</span>)&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;Login required&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">// To handle any other error</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">else</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"built_in\">console</span>.log(err.responseJSON.ErrorId + <span class=\"string\">&quot; : &quot;</span> + err.responseJSON.ErrorMessage);</span></span><br><span class=\"line\"><span class=\"javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">&#125; </span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">// Fetch Token Call</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"built_in\">window</span>.auth.getAuthenticationToken(callbackFn);</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>b. Create a Page Template for the above Web Template, then create a Web Page for the Page Template.</li>\n<li>c. At last, try to open the Web Page from Portal website. Without login, nothing will be returned. After login, the data will display on Portal directly.<br>\n<img src=\"https://ichrisj.gitee.io/reslib/images/call-external-apis-within-power-apps-portals/data_in_portal.png\" alt=\"data in portal\" loading=\"lazy\"></li>\n</ul>\n","prev":{"title":"Hello World","link":"2022/09/15/hello-world"},"next":{"title":"Manacher算法及应用","link":"2022/01/04/manacher-algo"},"plink":"https://blog.citysouth.cc/2022/09/15/call-external-apis-within-power-apps-portals/","toc":[{"id":"1.-register-an-app-on-azure","title":"1. Register an App on Azure","index":"1"},{"id":"2.-create-site-settings","title":"2. Create Site Settings","index":"2"},{"id":"3.-get-authentication-token","title":"3. Get Authentication Token","index":"3"},{"id":"4.-create-an-api-on-apim","title":"4. Create an API on APIM","index":"4"},{"id":"5.-validate-jwt-token-config","title":"5. Validate JWT token config","index":"5"},{"id":"6.-fix-cors.","title":"6. Fix CORS.","index":"6"},{"id":"7.-remove-subscription-requirement","title":"7. Remove Subscription requirement","index":"7"},{"id":"8.-test.","title":"8. Test.","index":"8"}],"copyright":{"link":"<a href=\"https://blog.citysouth.cc/2022/09/15/call-external-apis-within-power-apps-portals/\" title=\"Call External APIs within Power Apps Portal\">https://blog.citysouth.cc/2022/09/15/call-external-apis-within-power-apps-portals/</a>","license":"自由转载-非商用-禁止演绎-保持署名 Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-nd/4.0/\" target=\"_blank\">CC BY-NC-ND 4.0</a>)","published":"September 15, 2022"},"reading_time":"1560 words in 13 min"}